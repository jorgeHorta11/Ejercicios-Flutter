class Vehiculo {
  int llantas;
  int asientos;
  String modelo;
  String marca;

  Vehiculo(this.llantas, this.asientos, this.marca, this.modelo);

  @override
  String toString() {
    return """ 
    Vehiculo:[ 
      llantas: $llantas
      asientos: $asientos
      modelo: $modelo
      marca: $marca
      ]
    """;
  }
}

bool esMayorFunction(int numeroUno, int numeroDos) {
  return (numeroUno > numeroDos);
}

int compareToDateNow(String date) {
  DateTime currentTime = DateTime.now();
  DateTime otherDate = DateTime.parse(date);
  return currentTime.compareTo(otherDate);
}

String compareToDateNowasString(String date) {
  DateTime currentTime = DateTime.now();
  DateTime otherDate = DateTime.parse(date);
  int result = currentTime.compareTo(otherDate);
  return ((result >= 0) ? 'ahora o en el futuro' : ' del pasado');
}

String compareToDateNowasStringTwo(String date) {
  int result = DateTime.now().compareTo(DateTime.parse(date));
  return ((result >= 0) ? 'ahora o en el futuro' : ' del pasado');
}

void main() {
  print(compareToDateNowasString('2020-11-20'));

  print(compareToDateNowasString('2022-09-01'));

  print(compareToDateNowasStringTwo('2020-11-20'));

  print(compareToDateNowasStringTwo('2022-09-01'));

  print(fechaMomento);

  print(caseGrado);

  print(factorial);

  print(doWhileMayorTo);

  print(whileMenorTo);

  print(whileCount);

  print(conversion);

  print(fechaTiempo);

  print(esMayorVsDinamico);

  

  /*

  Vehiculo nuevo = new Vehiculo(4, 6,'ultimo modelo');
  dynamic test = 15;
  print( test.runtimeType );
  print( test.toString() );
  print( test );
  test = 'hola mundo';
    print( test.runtimeType );
  print( test );
  */
}

void fechaMomento() {
  String momento = ((compareToDateNow('2020-11-20') >= 0)
      ? 'ahora o en el futuro'
      : ' del pasado');

  print(momento);

  String momentoDos = ((compareToDateNow('2022-09-01') >= 0)
      ? "ahora o en el futura"
      : "del pasado");

  print(momentoDos);
}

void caseGrado() {
  String grado = "B";
  switch (grado) {
    case "A":
      {
        print("Excellent");
      }
      break;
    case "B":
      {
        print("good");
      }
      break;

    case "C":
      {
        print("Fair");
      }
      break;

    case "D":
      {
        print("Poor");
      }
      break;

    default:
      {
        print("invalid choice");
      }
      break;
  }
}

void factorial() {
  int num = 5;
  int factorial = 1;

  while (num >= 1) {
    factorial = factorial * num;
    num--;
  }

  print("The factorial is ${factorial}");
}

void doWhileMayorTo() {
  int n = 10;
  do {
    print(n);
    n--;
  } while (n > 0);

  print("salio");
}

void whileMenorTo() {
  int count = 1;
  while (count <= 10) {
    print("dentro del while ${count}");
    count++;
    if (count == 4) {
      break;
    }
  }

  print("afuera del while ");
}

void whileCount() {
  int count = 1;
  bool loppWhile = true;

  while (loppWhile) {
    print(" dentro del while ${count}");
    count++;
    if (count == 4) {
      loppWhile = false;
    }
  }
}

void conversion() {
  var number = "hola";
  print(number.runtimeType);

  if (number == 'hola') {
    print('hola mundo');
  } else {
    print('este es un numero');
  }
}

void fechaTiempo() {
  DateTime currentDate = DateTime.now();
  print(currentDate.toString());
  print(currentDate.toIso8601String());
  print(currentDate.toUtc());
  print(currentDate.toLocal());

  DateTime date = DateTime.parse('2020-11-20');
  print(date.toString());
  print(date.toIso8601String());
  print(date.toUtc());
  print(date.toLocal());

  print(currentDate.timeZoneName);

  Duration diff = currentDate.difference(date);

  print(" diferencia de dias ${diff.inDays}");
}

void esMayorVsDinamico() {
  bool isTrue = true;
  bool isTrueTwo = esMayorFunction(5, 6);

  String esMayorAsString =
      ((esMayorFunction(5, 6) == true) ? "si es mayor" : "no es mayor");

  print(esMayorAsString);

  if (esMayorFunction(8, 6)) {
    esMayorAsString = "es mayor desde un if";
  } else {
    esMayorAsString = "no es mayor desde un if";
  }

  print(esMayorAsString);

  dynamic esMayorDinamico = ((isTrue != true) ? "si es mayor" : 52);

  var esMayorVar = ((5 > 6) ? "si es mayor tipo var" : 52);
  bool esMayor = (6 > 5);
  print(esMayor);

  print(esMayorDinamico);
  print(" es mayor de tipo var ${esMayorVar}");
}



abstract class Animal {}

abstract class Mammal extends Animal {}

abstract class Bird extends Animal {}

abstract class Fish extends Animal {}

class Dolphin extends Mammal with SwimMixin {}

class Bat extends Mammal with WalkMixin, FlyMixin {}

class Cat extends Mammal with WalkMixin {}

class Dove extends Bird with FlyMixin {}

class Duck extends Bird with WalkMixin {}

class Shark extends Fish with SwimMixin {}

class FlyingFish extends Fish with SwimMixin {}

mixin WalkMixin {
  void walk(String text) => print("walk ${text}");

  void velocity() => print("is very fast");
}

mixin SwimMixin {
  void swin(String text) => print("swim ${text}");
}

mixin FlyMixin {
  void fly(String text) => print("fly ${text}");
}

void main() {
  Dolphin newDolphin = new Dolphin();
  newDolphin.swin("Nornerto");

  Cat newCat = new Cat();
  newCat.walk("inari");
  newCat.velocity();

  Bat newBat = new Bat();
  newBat.fly('ricardo');
  newBat.walk('preuba');
}


///ejercicio 1///
import 'dart:math';
class Punto{
  int _x;
  int _y;
  
  Punto(this._x, this._y);
  
  String polares(){
    num radio = pow(this._x,  2)+pow(this._y,2);
    radio = sqrt(radio);
    double theta = this._y.toDouble() / this._x;
    theta = atan(theta);
    
    return '($radio.$theta)';
  }
  
  String cartesiano() => '($_x.$_y)';
    
}

void main(){
 
}

//ejercicio 4//
import 'dart:math';

class Complejo{
  double _numReales;
  double _num2;
  Complejo(this._numReales, this._num2);
  
  void show(){
    print("( ${_numReales}, ${_num2})");
  }
  
  void cambioReales(double cont) => _numReales += cont;
  void cambioNum2(double cont) => _num2 += cont;
  double getNumReales() => _numReales;
  double getNum2() => _num2;
  double modulo(){
    double mod = sqrt(pow(_numReales,2) + pow(_num2,2));
    
    return mod;
  }
  
}

Complejo sumaComplejo(Complejo a1,Complejo b2){
  
  a1.cambioReales(b2.getNumReales());
  a1.cambioNum2(b2.getNum2());
  
  return a1; 
}
Complejo restaComplejo(Complejo a1,Complejo b2){
  
  a1.cambioReales(-b2.getNumReales());
  a1.cambioNum2(-b2.getNum2());
  
  return a1; 
}



void main() {
 
  Complejo num = Complejo(2,5);
  num.show();
  print("${num.modulo()}"); 
  Complejo num3 = Complejo(9,2);
  
  Complejo num4 = sumaComplejo(num,num3);
  
  
}

//ejercicio 10//
class BarcoTitanic {
  bool state;
  String matricula;
  double esloraM;
  String aFabricacion;
  String potenciaVP;
  String numMastiles;

  BarcoTitanic(this.state, this.matricula, this.esloraM, this.aFabricacion,this.potenciaVP, this.numMastiles);
  
}

class ClienteAlquiler{
  
  String cedula;
  String nombre;
  int cantidadDias;
  
  ClienteAlquiler(this.cedula, this.nombre, this.cantidadDias);
  
}

class AlquilerBarco extends ClienteAlquiler{
  
  AlquilerBarco(String cedula, String nombre, int cantidadDias )
    : super(cedula, nombre, cantidadDias);
  
  void calAlquiler(double esloraM) {
    int precio=1200;
    double precioAlquiler=(esloraM*cantidadDias*precio);
    String msj = "el precio del arquiler es: ${precioAlquiler}, para los ${cantidadDias} dias";
    print(msj);
  }
}

void main(){
  BarcoTitanic a = new BarcoTitanic(true, 'asdf345', 20.5, '30', '600','1');
  
  AlquilerBarco alquiler = new AlquilerBarco('1006027385', 'jorge',15);
  double esloraM=a.esloraM;
  alquiler.calAlquiler(esloraM);

}